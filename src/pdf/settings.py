"""
Django settings for pdf project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
import os
from os.path import join, dirname
from dotenv import load_dotenv
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# dotenv_path = join(dirname(__file__), '.env.dev')
# load_dotenv(dotenv_path)
load_dotenv()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

GC_CLIENT_ID = os.getenv('GC_CLIENT_ID')
GC_CLIENT_SECRET = os.getenv('GC_CLIENT_SECRET')
GC_SCOPES = os.getenv('GC_SCOPES')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=1))

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    # Applications
    'pdf',
    'data_mapping_console.apps.DataMappingConsoleConfig',

    # Django Extensions
    'django_extensions',

    # Admin
    'grappelli',

    # Health Check
    'health_check',  # required
    'health_check.db',  # stock Django health checkers
    'health_check.cache',
    'health_check.storage',
    'health_check.contrib.migrations',
    'health_check.contrib.celery',  # requires celery
    'health_check.contrib.celery_ping',  # requires celery
    'health_check.contrib.psutil',  # disk and memory utilization; requires psutil
    'health_check.contrib.rabbitmq',  # requires RabbitMQ broker

    # Celery Related
    'django_celery_results',
    'django_celery_beat',

    # Defaults
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Others
    'rest_framework',
    'corsheaders',
    'django_filters',
    'drf_yasg2',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pdf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pdf.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE":
            os.environ.get("SQL_ENGINE", "django.db.backends.postgresql_psycopg2"),
        "NAME":
            os.environ.get("SQL_DATABASE"),
        "USER":
            os.environ.get("SQL_USER"),
        "PASSWORD":
            os.environ.get("SQL_PASSWORD"),
        "HOST":
            os.environ.get("SQL_HOST"),
        "PORT":
            os.environ.get("SQL_PORT"),
        'TEST': {
            'NAME': 'test_database_',
        },
        'CONN_MAX_AGE': None,
        'DISABLE_SERVER_SIDE_CURSORS': True
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_ROOT = 'staticfiles'
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'pdf/static'),
# )

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Related
CELERY = {
    'broker_url': os.getenv("CELERY_BROKER_URL"),
    'result_backend': os.getenv('CELERY_RESULT_BACKEND'),
    'timezone': os.getenv('TIME_ZONE'),
    'task_track_started': True,
    'task_time_limit': 30 * 60,
    'imports': ('pdf.tasks',),
    'task_serializer': 'json',
    'result_serializer': 'json',
    'accept_content': ['json'],
    'beat_schedule': {
        'start_beat_schedule': {
            'task': 'pdf.tasks.celery_tasks.beat_task',
            'schedule': crontab(minute=0, hour=4)
        }
    }
}

# Health Check
BROKER_URL = os.getenv("CELERY_BROKER_URL")
HEALTH_CHECK = {
    'DISK_USAGE_MAX': 90,  # percent
    'MEMORY_MIN': 100,    # in MB
}

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            # exact format is not important, this is the minimum information
            'format': '%(asctime)s %(name)-12s %(funcName)-15s %(message)s',
        },
        # 'graylog': {
        #     # exact format is not important, this is the minimum information
        #     'format': "[" + os.getenv("PROJECT_NAME") + "<>" + os.getenv("ENVIRONMENT") + "] " + '%(message)s',
        # },
    },
    'handlers': {
        # 'graypy': {
        #     'level': 'INFO',
        #     'class': 'graypy.GELFUDPHandler',
        #     'host': os.getenv('GRAYLOG_HOST'),
        #     'port': 12201,
        #     'formatter': 'graylog'
        # },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        # 'django.request': {
        #     'handlers': ['graypy'],
        #     'level': 'INFO',
        #     'propagate': True,
        # },
        'django': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'INFO',
        },
        # 'django.db.backends': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        # },
    },
}

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = ['*']


REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    "DATE_INPUT_FORMATS": ["%d-%m-%Y"]
}
